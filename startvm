#!/bin/sh

# Copyright (c) 2014 - 2019, 2021, 2023 Yamagi
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

# -------------------------------------------------------------------- #

# Simple script to run a Bhvye virtual machine. Before running this
# script make sure that the following kernel modules are loaded:
#  - if_bridge.ko
#  - if_tuntap.ko
#  - nmdm.ko
#  - vmm.ko
#
# All instances of this script must share the same configuration dir,
# otherwise strange things will happen.
#
# If a vncviewer is installed, the script can launch it with the 'vnc'
# command on supported VMs. net/tigervnc-viewer is recommended. In all
# other cases the VNC port is printed.

# -------------------------------------------------------------------- #

# Source system wide configuration.
SCRIPTPATH=$(readlink -f "$0")
SCRIPTPATH=$(dirname "$SCRIPTPATH")
. $SCRIPTPATH/system.cfg

# -------------------------------------------------------------------- #

# Print usage.
usage() {
	echo "Usage: ./startvm cmd [vmname]"
	echo ""
	echo "Commands:"
	echo " - cons:   Open a serial console to the guest"
	echo " - halt:   Send an ACPI shutdown request to the guest"
	echo " - help:   This message"
	echo " - kill:   Kill the VM"
	echo " - list:   List all known VMs"
	echo " - run:    Run the VM"
	echo " - status: Show status"
	echo " - vnc:    Run vncviewer or print the VNC port"
	exit 1
}

# -------------------------------------------------------------------- #

# Debug output.
dbg() {
	if [ $DEBUG -ne 0 ] ; then
		echo $@ >&2
	fi
}

# Abort with error and exit code 1.
err() {
	echo $@ >&2
	exit 1
}

# -------------------------------------------------------------------- #

# Abort if not running as root.
asroot() {
	if [ $(id -u) -ne 0 ] ; then
		err "This can only be done as root."
	fi
}

# Transform the process into a daemon.
becomedaemon() {
	dbg "Respawning as daemon"
	/usr/sbin/daemon -f $1 daemon $2
}

# Check if the given bridge exists.
#  $1 -> Bridge to check.
checkbridge() {
	dbg "Checking if $1 exist"
	/sbin/ifconfig $1 > /dev/null

	if [ $? -ne 0 ] ; then
		err "Bridge $1 doesn't exists"
	fi
}

# Check if the "up on open" sysctl for
# tap devices is set. If not it's value
# is changed to 1.
checktapuponopen() {
	dbg "Checking if if_tuntap.ko sysctls are available"
	/sbin/sysctl net.link.tap.up_on_open > /dev/null 2>&1

	if [ $? -ne 0 ] ; then
		err "if_tuntab.ko sysctls aren't available"
	fi

	if [ $(/sbin/sysctl -n net.link.tap.up_on_open) -ne 1 ] ; then
		dbg "Setting net.link.tap.up_on_open to 1"
		/sbin/sysctl net.link.tap.up_on_open=1 > /dev/null 2>&1
	fi
}

# Create and configure the given tap device.
#  $1 -> ID of the VM.
#  $2 -> Bridge to connect to.
createtap() {
	# The naming scheme for tap devices is tap$ID_BRIDGE. It
	# would be nice to have the VM name in it, but the maximum
	# length is 15 characters. For the same reason and better
	# readability we don't want the full name of the bridge,
	# only the service name. We support two name schemes for
	# bridges and need to extract the service name accordingly:
	#  * bridge_servicename -> Extract service name.
	#  * bridge-servicename -> Extract servicename.
	#  * bridge.servicename -> Extract servicename.
	# Everything else is used like it is.
	TAPBRIDGE=""
	echo $2 | grep -q -e '_' -e '-' -e '.' >/dev/null 2>&1
	if [ $? -ne 0 ] ; then
		# Unknown or standard scheme.
		TAPBRIDGE=$2
	else
		echo $2 | grep -q -e '_' >/dev/null 2>&1
		if [ $? -eq 0 ] ; then
			# bridge_servicename scheme.
			TAPBRIDGE=$(echo $2 | cut -d '_' -f 2-)
		else
			echo $2 | grep -q -e '-' >/dev/null 2>&1
			if [ $? -eq 0 ] ; then
				# bridge-servicename scheme.
				TAPBRIDGE=$(echo $2 | cut -d '-' -f 2-)
			else
				echo $2 | grep -q -e '.' >/dev/null 2>&1
				if [ $? -eq 0 ] ; then
					# bridge.servicename scheme.
					TAPBRIDGE=$(echo $2 | cut -d '.' -f 2-)
				fi
			fi
		fi
	fi

	TAPNAME=tap$1_$TAPBRIDGE
	dbg "tap device name is $TAPNAME"

	/sbin/ifconfig $TAPNAME > /dev/null 2>&1
	if [ $? -ne 0 ] ; then
		dbg "Creating $TAPNAME"

		# Create, name and annotate the tap device.
		/sbin/ifconfig tap create name $TAPNAME \
			descr "VM $NAME -> $2" >/dev/null 2>&1
		if [ $? -ne 0 ] ; then
			err "Couldn't create $TAPNAME"
		fi

		# Connect it to the given bridge.
		/sbin/ifconfig $2 addm $TAPNAME stp $TAPNAME up

		# Return the device name to the caller.
		echo $TAPNAME
	else
		err "$TAPNAME already existent"
	fi
}

# Removes a tap device from a bridge. As a security
# measure only devices associated this this VM are
# removed.
#  $1 -> Bridge to remove the device from.
#  $2 -> Whitespace separated list of all tap devices.
deletetap() {
	MEMBERS=$(ifconfig $1 | grep member | awk '{print $2}')
	for MEMBER in $MEMBERS ; do
		for TAP in $2 ; do
			if [ $MEMBER == $TAP ] ; then
				# It's one of our tap devices.
				dbg "Removing $MEMBER from $1"
				/sbin/ifconfig $1 deletem $MEMBER
				/sbin/ifconfig $MEMBER destroy
			fi
		done
	done
}

# Generate a unique ID for this instance.
generateid() {
	# Lock.
    while [ true ] ; do
		if [ -e $RTDIR/id.lock ] ; then
			sleep 0.1
		else
			touch $RTDIR/id.lock
			break
		fi
	done

	dbg "Generating ID"

	# Create ID.
	if [ -e $RTDIR/id ] ; then
		. $RTDIR/id

		for COUNT in $(seq 0 99) ; do
			MATCH=0

			for id in $UID ; do
				if [ $COUNT -eq $id ] ; then
					MATCH=1
				fi
			done

			# Mkay, this ID is unused.
			if [ $MATCH -eq 0 ] ; then
				echo "UID=\"$UID $COUNT\"" > $RTDIR/id
				rm $RTDIR/id.lock
				return $COUNT
			fi
		done

		# If we're here, we're unable to find an ID.
		dbg "Maximum ID reached, sorry."
		rm $RTDIR/id.lock
		exit 1
	else
		# Save and unlock.
		echo "UID=\"0\"" > $RTDIR/id
		rm $RTDIR/id.lock
		return 0
	fi
}

# Remove the given ID from the list of used IDs.
#  $1 -> ID to remove.
removeid() {
	# Lock.
    while [ true ] ; do
		if [ -e $RTDIR/id.lock ] ; then
			sleep 0.1
		else
			touch $RTDIR/id.lock
			break
		fi
	done

	ls $RTDIR/*state > /dev/null 2>&1

	if [ $? -ne 0 ] ; then
		dbg "Last process, resetting ID"
		rm -rf $RTDIR/id
	else
		dbg "Not the last processing, freeing ID"
        . $RTDIR/id

		IDS=""

		for ID in $UID ; do
			if [ $ID -ne $1 ] ; then
				IDS="$IDS$ID "
			fi
		done

		echo "UID=\"$IDS\"" > $RTDIR/id
	fi

	# Unlock.
	rm $RTDIR/id.lock
}

# -------------------------------------------------------------------- #

# Open a serial console to the VM.
console() {
	asroot

	if [ ! -e $RTDIR/$NAME.state ] ; then
		 err "VM is not running"
	fi

	. $RTDIR/$NAME.state

	# Call cu.
	dbg "Calling cu"
	echo "Type ~ + ^d to exit"
	/usr/bin/cu -s 9600 -l $NMDMB
	echo "Console closed"
}

# Shut the VM down by sending SIGTERM.
# Bhyve will generate an ACPI shutdown
# event and send it to the guest.
haltvm() {
	asroot

 	if [ ! -e $RTDIR/$NAME.state ] ; then
		err "VM is not running"
	fi

	. $RTDIR/$NAME.state

 	if [ -z "$PID" ] ; then
		err "VM is running, but Bhyve hasn't started yet"
	fi

	dbg "Sending SIGTERM to VM"
	kill -TERM $PID
}

# Kill the VM by sending SIGKILL.
killvm() {
	asroot

  	if [ ! -e $RTDIR/$NAME.state ] ; then
		err "VM is not running"
	fi

	. $RTDIR/$NAME.state

	if [ -z "$PID" ] ; then
		err "VM is running, but Bhyve hasn't started yet"
	fi

	dbg "Sending SIGKILL to VM"
	kill -KILL $PID
}

# Print a list of all known VMs.
listvms() {
	dbg "Printing VMs in $VMDIR"

	overall_len=0

	for vm in $(ls $VMDIR) ; do
		if [ ! -f "$VMDIR/$vm/bhyve.cfg" ] ; then
			continue
		fi

		if [ ${#vm} -gt $overall_len ] ; then
			overall_len=${#vm}
		fi
	done

	overall_len=$(($overall_len + 5))

	for vm in $(ls $VMDIR) ; do
		iteration=0
		padding=""

		if [ ! -f "$VMDIR/$vm/bhyve.cfg" ] ; then
			continue
		fi

		while [ $iteration -lt $(($overall_len - ${#vm})) ] ; do
			padding="$padding."
			iteration=$(($iteration + 1))
		done

		if [ -e $RTDIR/$vm.state ] ; then
			if [ -e /dev/vmm/$vm ] ; then
				state="Running"
			else
				state="Stale PID file"
			fi
		else
			if [ -e /dev/vmm/$vm ] ; then
				state="Stale VM instance"
			else
				state="Stopped"
			fi
		fi

		printf "%s %s %s\n" "$vm" "$padding" "$state"
	done
}

# Print a newline separated list of all VMs.
# This can be used for shell autocompletion.
plainlistvms() {
	dbg "Printing VMs in $VMDIR"

	for vm in $(ls $VMDIR) ; do
		if [ ! -f "$VMDIR/$vm/bhyve.cfg" ] ; then
			continue
		fi

		echo $vm
	done
}

# Run / start the VM.
runvm() {
	asroot

	# Check if VM is still running.
	if [ -e /dev/vmm/$NAME ] ; then
		err "VM is still running."
	fi

	# Create working directory.
	mkdir -p $RTDIR

	# Determine ID.
	generateid
	ID=$?

	# Check if tap devices are marked as up on open().
	checktapuponopen

	# Iterate over all requested bridges, check
	# them and create the corresponding tap devices.
	# Save the number of created tap devices, we
	# need that further down below.
	TAPS=""
	NUMTAPS=0
	for BRIDGE in $BRIDGES ; do
		checkbridge $BRIDGE
		TAPS="$TAPS $(createtap $ID $BRIDGE)"
		NUMTAPS=$(($NUMTAPS + 1))
	done

	# Determine nmdm interface to use.
	NMDMA=/dev/nmdm_${ID}_${NAME}_A
	NMDMB=/dev/nmdm_${ID}_${NAME}_B

	# Determine a VNC port.
	VNC=$(printf "59%02d" $ID)

	# Save state.
	dbg "Saving state to $RTDIR/$NAME.state"
	echo "ID=$ID" >> $RTDIR/$NAME.state
	echo "NMDMA=$NMDMA" >> $RTDIR/$NAME.state
	echo "NMDMB=$NMDMB" >> $RTDIR/$NAME.state
	echo "NUMTAPS=$NUMTAPS" >> $RTDIR/$NAME.state
	echo "TAPS=$TAPS" >> $RTDIR/$NAME.state
	echo "VNC=$VNC" >> $RTDIR/$NAME.state

	while [ true ] ; do
		# Configure the VM.
		CMD="bhyve -k $BHYVECFG"
		CMD="$CMD -s 0,hostbridge"

		DEVNUM=$((30 - $NUMTAPS))
		for TAP in $TAPS ; do
			CMD="$CMD -s $DEVNUM,virtio-net,$TAP"
			DEVNUM=$(($DEVNUM + 1))
		done

		CMD="$CMD -s 30,fbuf,tcp=0.0.0.0:$VNC,w=$VNCWIDTH,h=$VNCHEIGHT"
		if [ $VNCWAIT = 1 ] ; then
			CMD="$CMD,wait"
		fi

		CMD="$CMD -s 31,lpc"
		CMD="$CMD -l com1,$NMDMA"

		CMD="$CMD -l bootrom,$BOOTROM"
		if [ ! -z $NVRAM ] ; then
			CMD="$CMD,$NVRAM"
		fi

		CMD="$CMD $NAME"

		# Load and run the VM.
		dbg "Calling bhyve: $CMD"

		if [ $DEBUG -eq 0 ] ; then
			$CMD >/dev/null 2>&1 &
		else
			$CMD &
		fi

		PID=$!

		# Save PID.
		dbg "Saving PID to $RTDIR/$NAME.state"
		echo "PID=$PID" >> $RTDIR/$NAME.state

		# Wait for bhyve.
		wait $PID
		RET=$?

		# Destroy the VM and wait a second to
		# give the system a little moment to
		# clean things up.
		if [ -e /dev/vmm/$NAME ] ; then
			/usr/sbin/bhyvectl --destroy --vm=$NAME > /dev/null 2>&1
		fi

		sleep 1

		# Bhyve return codes:
		# - 0: reset
		# - 1: powered off
		# - 2: halted
		# - 3: triple fault
		# - other: crash
		if [ $RET -ne 0 ] ; then
			dbg "Shutdown"
			break
		fi

		dbg "Reboot"
	done

	# Cleanup.
	for BRIDGE in $BRIDGES ; do
		deletetap $BRIDGE "$TAPS"
	done

	rm $RTDIR/$NAME.state
	removeid $ID
}

# Print the status of VM.
status() {
	if [ -e $RTDIR/$NAME.state ] ; then
		if [ -e /dev/vmm/$NAME ] ; then
			echo "Running"
		else
			echo "Stale state file"
		fi
	else
		if [ -e /dev/vmm/$NAME ] ; then
			echo "Stale VM instance"
		else
			echo "Stopped"
		fi
	fi
}

# Open a vncviewer session to the VM or
# return the VNC port if no vncviewer is
# available.
vnc() {
	if [ ! -e $RTDIR/$NAME.state ] ; then
		err "VM is not running"
	fi

	. $RTDIR/$NAME.state

	if [ ! -f "/usr/local/bin/vncviewer" ] ; then
		dbg "/usr/local/bin/vncviewer doesn't exists"
		echo "VNC port: $VNC"
	else
		dbg "Launching /usr/local/bin/vncviewer"
		/usr/local/bin/vncviewer 0.0.0.0:$VNC 2>&1 &
	fi
}

# -------------------------------------------------------------------- #

# Check if configuration dir exists.
if [ ! -d $VMDIR ] ; then
	err "$VMDIR doesn't exists or is not a directory"
fi

# Single parameter commands.
if [ $# -eq 1 ] ; then
	case $1 in
		list)
			listvms
			;;
		plainlist)
			plainlistvms
			;;
		help)
			usage
			;;
		*)
			usage
			;;
	esac

	exit 0
fi

if [ $# -ne 2 ] ; then
	usage
fi

# Check if it's a valid VM.
NAME=$2
BHYVECFG="$VMDIR/$NAME/bhyve.cfg"
STARTVMCFG="$VMDIR/$NAME/startvm.cfg"

if [ ! -f "$BHYVECFG" ] ; then
	err "$NAME is not a valid VM"
fi

if [ -f "$STARTVMCFG" ] ; then
	. $STARTVMCFG
fi

if [ $1 = "daemon" ] ; then
	runvm
else
	case $1 in
		cons)
			console
			;;
		halt)
			haltvm
			;;
		help)
			usage
			;;
		kill)
			killvm
			;;
		list)
			listvms
			;;
		run)
			if [ $DAEMON -ne 0 ] ; then
				becomedaemon $0 $NAME
			else
				runvm
			fi
			;;
		status)
			status
			;;
		vnc)
			vnc
			;;
		*)
			usage
			;;
	esac
fi
