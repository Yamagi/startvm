--- grub-core/kern/emu/main.c
+++ grub-core/kern/emu/main.c
@@ -102,6 +102,7 @@ static struct argp_option options[] = {
   {"verbose",     'v', 0,      0, N_("print verbose messages."), 0},
   {"hold",     'H', N_("SECS"),      OPTION_ARG_OPTIONAL, N_("wait until a debugger will attach"), 0},
 #ifdef BHYVE
+  {"cons-dev", 'c', N_("cons-dev"), 0, N_("a tty(4) device to use for terminal I/O"), 0},
   {"ncons",  'n', 0,            0, N_("disable insertion of console=ttys0"), 0},
   {"memory", 'M', N_("MBYTES"), 0, N_("guest RAM in MB [default=%d]"), 0},
 #endif
@@ -162,6 +163,9 @@ argp_parser (int key, char *arg, struct argp_state *state)
       verbosity++;
       break;
 #ifdef BHYVE
+    case 'c':
+      grub_emu_bhyve_set_console_dev(xstrdup(arg));
+      break;
     case 'n':
       grub_emu_bhyve_unset_cinsert();
       break;
--- grub-core/term/emu/console.c
+++ grub-core/term/emu/console.c
@@ -28,6 +28,16 @@
 # define A_STANDOUT	0
 #endif /* ! A_STANDOUT */
 
+#ifdef BHYVE
+#include <sys/param.h>
+
+#include <fcntl.h>
+#include <stdlib.h>
+#include <termios.h>
+
+#include <grub/emu/bhyve.h>
+#endif
+
 #include <grub/emu/console.h>
 #include <grub/term.h>
 #include <grub/types.h>
@@ -42,10 +52,16 @@
 #error What the hell?
 #endif
 
-#ifdef BHYVE	/* should include <sys/param.h> */
-#ifndef MIN
-#define MIN(a,b) (((a)<(b))?(a):(b))
-#endif
+#ifdef BHYVE
+static SCREEN *g_term = NULL;
+static const char *g_cdev = NULL;
+
+void
+grub_emu_bhyve_set_console_dev(const char *dev)
+{
+
+        g_cdev = dev;
+}
 #endif
 
 static int grub_console_attr = A_NORMAL;
@@ -236,7 +252,45 @@ grub_ncurses_refresh (struct grub_term_output *term __attribute__ ((unused)))
 static grub_err_t
 grub_ncurses_init (struct grub_term_output *term __attribute__ ((unused)))
 {
-  initscr ();
+#ifdef BHYVE
+  const char *term_type;
+  struct termios termi;
+  FILE *fin, *fout;
+  int fd, rc;
+
+  if (g_cdev != NULL) {
+    /* Open user-supplied console device. */
+    fd = open (g_cdev, O_RDWR);
+    if (fd < 0)
+      return (GRUB_ERR_UNKNOWN_DEVICE);
+
+    rc = tcgetattr (fd, &termi);
+    if (rc < 0)
+      return (GRUB_ERR_IO);
+    cfmakeraw (&termi);
+    rc = tcsetattr (fd, 0, &termi);
+    if (rc < 0)
+      return (GRUB_ERR_IO);
+
+    fin = fdopen (fd, "r");
+    fout = fdopen (fd, "w");
+    if (fin == NULL || fout == NULL)
+      return (GRUB_ERR_OUT_OF_MEMORY);
+
+    term_type = "vt102";
+    if (getenv ("TERM") != NULL)
+      term_type = getenv ("TERM");
+
+    g_term = newterm (term_type, fout, fin);
+    if (g_term == NULL)
+      return (GRUB_ERR_BUG);
+
+    set_term (g_term);
+  } else
+    /* Default to stdin/out. */
+#endif  /* BHYVE */
+    initscr ();
+
   raw ();
   noecho ();
   scrollok (stdscr, TRUE);
@@ -272,6 +326,13 @@ grub_ncurses_init (struct grub_term_output *term __attribute__ ((unused)))
 static grub_err_t
 grub_ncurses_fini (struct grub_term_output *term __attribute__ ((unused)))
 {
+
+#ifdef BHYVE
+  if (g_term != NULL)
+    delscreen (g_term);
+  g_term = NULL;
+#endif
+
   endwin ();
   return 0;
 }
--- include/grub/emu/bhyve.h
+++ include/grub/emu/bhyve.h
@@ -34,6 +34,7 @@ struct grub_bhyve_info {
 };
 
 int grub_emu_bhyve_init(const char *vmname, grub_uint64_t memsz);
+void grub_emu_bhyve_set_console_dev(const char *dev);
 void grub_emu_bhyve_unset_cinsert(void);
 int  EXPORT_FUNC(grub_emu_bhyve_cinsert) (void);
 void EXPORT_FUNC(grub_emu_bhyve_boot32)(grub_uint32_t bootaddr, 
